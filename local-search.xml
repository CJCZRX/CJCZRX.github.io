<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>代价敏感错误率与代价曲线解析</title>
    <link href="/2023/01/18/%E4%BB%A3%E4%BB%B7%E6%95%8F%E6%84%9F%E9%94%99%E8%AF%AF%E7%8E%87%E4%B8%8E%E4%BB%A3%E4%BB%B7%E6%9B%B2%E7%BA%BF%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/01/18/%E4%BB%A3%E4%BB%B7%E6%95%8F%E6%84%9F%E9%94%99%E8%AF%AF%E7%8E%87%E4%B8%8E%E4%BB%A3%E4%BB%B7%E6%9B%B2%E7%BA%BF%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="代价敏感错误率和代价敏感函数"><a href="#代价敏感错误率和代价敏感函数" class="headerlink" title="代价敏感错误率和代价敏感函数"></a>代价敏感错误率和代价敏感函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成伪样例</span><br>output_score = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>))<br>output_score<br></code></pre></td></tr></table></figure><p><img src="C:\Users\CJCZRX\AppData\Roaming\Typora\typora-user-images\image-20230118151325887.png" alt="out1"></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习周志华-模型评估与选择</title>
    <link href="/2023/01/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%91%A8%E5%BF%97%E5%8D%8E-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
    <url>/2023/01/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%91%A8%E5%BF%97%E5%8D%8E-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章-模型评估与比较"><a href="#第二章-模型评估与比较" class="headerlink" title="第二章 模型评估与比较"></a>第二章 模型评估与比较</h1><h2 id="2-1-误差与过拟合"><a href="#2-1-误差与过拟合" class="headerlink" title="2.1 误差与过拟合"></a>2.1 误差与过拟合</h2><p>我们将学习器对样本的实际预测结果与样本的真实值之间的差异成为：误差（error）。定义：</p><ul><li>在训练集上的误差称为训练误差（training error）或经验误差（empirical error）。</li><li>在测试集上的误差称为测试误差（test error）。</li><li>学习器在所有新样本上的误差称为泛化误差（generalization error）。</li></ul><p>显然，我们希望得到的是在新样本上表现得很好的学习器，即泛化误差小的学习器。因此，我们应该让学习器尽可能地从训练集中学出普适性的“一般特征”，这样在遇到新样本时才能做出正确的判别。然而，当学习器把训练集学得“太好”的时候，即把一些训练样本的自身特点当做了普遍特征；同时也有学习能力不足的情况，即训练集的基本特征都没有学习出来。我们定义：</p><ul><li>学习能力过强，以至于把训练样本所包含的不太一般的特性都学到了，称为：过拟合（overfitting）。</li><li>学习能太差，训练样本的一般性质尚未学好，称为：欠拟合（underfitting）。</li></ul><p>可以得知：在过拟合问题中，训练误差十分小，但测试误差教大；在欠拟合问题中，训练误差和测试误差都比较大。目前，欠拟合问题比较容易克服，例如增加迭代次数等，但过拟合问题还没有十分好的解决方案，过拟合是机器学习面临的关键障碍。</p><p><img src="https://cdn.kesci.com/upload/image/q61k93amwt.jpg?imageView2/0/w/960/h/960"></p><h2 id="2-2-评估方法"><a href="#2-2-评估方法" class="headerlink" title="2.2 评估方法"></a>2.2 评估方法</h2><p>在现实任务中，我们往往有多种算法可供选择，那么我们应该选择哪一个算法才是最适合的呢？如上所述，我们希望得到的是泛化误差小的学习器，理想的解决方案是对模型的泛化误差进行评估，然后选择泛化误差最小的那个学习器。但是，泛化误差指的是模型在所有新样本上的适用能力，我们无法直接获得泛化误差。</p><p>因此，通常我们采用一个“测试集”来测试学习器对新样本的判别能力，然后以“测试集”上的“测试误差”作为“泛化误差”的近似。显然：我们选取的测试集应尽可能与训练集互斥，下面用一个小故事来解释why：</p><p>假设老师出了10 道习题供同学们练习，考试时老师又用同样的这10道题作为试题，可能有的童鞋只会做这10 道题却能得高分，很明显：这个考试成绩并不能有效地反映出真实水平。回到我们的问题上来，我们希望得到泛化性能好的模型，好比希望同学们课程学得好并获得了对所学知识”举一反三”的能力；训练样本相当于给同学们练习的习题，测试过程则相当于考试。显然，若测试样本被用作训练了，则得到的将是过于”乐观”的估计结果。</p><h2 id="2-3-训练集与测试集的划分方法"><a href="#2-3-训练集与测试集的划分方法" class="headerlink" title="2.3 训练集与测试集的划分方法"></a>2.3 训练集与测试集的划分方法</h2><p>如上所述：我们希望用一个“测试集”的“测试误差”来作为“泛化误差”的近似，因此我们需要对初始数据集进行有效划分，划分出互斥的“训练集”和“测试集”。下面介绍几种常用的划分方法：</p><h3 id="2-3-1-留出法"><a href="#2-3-1-留出法" class="headerlink" title="2.3.1 留出法"></a>2.3.1 留出法</h3><p>将数据集D划分为两个互斥的集合，一个作为训练集S，一个作为测试集T，满足D&#x3D;S∪T且S∩T&#x3D;∅，常见的划分为：大约2&#x2F;3-4&#x2F;5的样本用作训练，剩下的用作测试。需要注意的是：训练&#x2F;测试集的划分要尽可能保持数据分布的一致性，以避免由于分布的差异引入额外的偏差，常见的做法是采取分层抽样。同时，由于划分的随机性，单次的留出法结果往往不够稳定，一般要采用若干次随机划分，重复实验取平均值的做法。</p><h3 id="2-3-2-交叉验证法"><a href="#2-3-2-交叉验证法" class="headerlink" title="2.3.2 交叉验证法"></a>2.3.2 交叉验证法</h3><p>将数据集D划分为k个大小相同的互斥子集，满足D&#x3D;D1∪D2∪…∪Dk，Di∩Dj&#x3D;∅（i≠j），同样地尽可能保持数据分布的一致性，即采用分层抽样的方法获得这些子集。交叉验证法的思想是：每次用k-1个子集的并集作为训练集，余下的那个子集作为测试集，这样就有K种训练集&#x2F;测试集划分的情况，从而可进行k次训练和测试，最终返回k次测试结果的均值。交叉验证法也称“k折交叉验证”，k最常用的取值是10，下图给出了10折交叉验证的示意图。</p><p><img src="https://cdn.kesci.com/upload/image/q61krxb1f5.png?imageView2/0/w/960/h/960"></p><p>与留出法类似，将数据集D划分为K个子集的过程具有随机性，因此K折交叉验证通常也要重复p次，称为p次k折交叉验证，常见的是10次10折交叉验证，即进行了100次训练&#x2F;测试。特殊地当划分的k个子集的每个子集中只有一个样本时，称为“留一法”，显然，留一法的评估结果比较准确，但对计算机的消耗也是巨大的。</p><h3 id="2-3-3-自助法"><a href="#2-3-3-自助法" class="headerlink" title="2.3.3 自助法"></a>2.3.3 自助法</h3><p>我们希望评估的是用整个D训练出的模型。但在留出法和交叉验证法中，由于保留了一部分样本用于测试，因此实际评估的模型所使用的训练集比D小，这必然会引入一些因训练样本规模不同而导致的估计偏差。留一法受训练样本规模变化的影响较小，但计算复杂度又太高了。“自助法”正是解决了这样的问题。</p><p>自助法的基本思想是：给定包含m个样本的数据集D，每次随机从D 中挑选一个样本，将其拷贝放入D’，然后再将该样本放回初始数据集D 中，使得该样本在下次采样时仍有可能被采到。重复执行m 次，就可以得到了包含m个样本的数据集D’。可以得知在m次采样中，样本始终不被采到的概率取极限为：</p><p><img src="https://cdn.kesci.com/upload/image/q61ku99nik.png?imageView2/0/w/960/h/960"></p><p>这样，通过自助采样，初始样本集D中大约有36.8%的样本没有出现在D’中，于是可以将D’作为训练集，D-D’作为测试集。自助法在数据集较小，难以有效划分训练集&#x2F;测试集时很有用，但由于自助法产生的数据集（随机抽样）改变了初始数据集的分布，因此引入了估计偏差。在初始数据集足够时，留出法和交叉验证法更加常用。</p><h2 id="2-4-调参"><a href="#2-4-调参" class="headerlink" title="2.4 调参"></a>2.4 调参</h2><p>大多数学习算法都有些参数(parameter) 需要设定，参数配置不同，学得模型的性能往往有显著差别，这就是通常所说的”参数调节”或简称”调参” (parameter tuning)。</p><p>学习算法的很多参数是在实数范围内取值，因此，对每种参数取值都训练出模型来是不可行的。常用的做法是：对每个参数选定一个范围和步长λ，这样使得学习的过程变得可行。例如：假定算法有3 个参数，每个参数仅考虑5 个候选值，这样对每一组训练&#x2F;测试集就有5<em>5</em>5&#x3D; 125 个模型需考察，由此可见：拿下一个参数（即经验值）对于算法人员来说是有多么的happy。</p><p>最后需要注意的是：当选定好模型和调参完成后，我们需要使用初始的数据集D重新训练模型，即让最初划分出来用于评估的测试集也被模型学习，增强模型的学习效果。用上面考试的例子来比喻：就像高中时大家每次考试完，要将考卷的题目消化掉（大多数题目都还是之前没有见过的吧？），这样即使考差了也能开心的玩耍了~。</p><h2 id="2-5-性能度量"><a href="#2-5-性能度量" class="headerlink" title="2.5 性能度量"></a>2.5 性能度量</h2><p>性能度量（performance measure）是衡量模型泛化能力的评价标准，在对比不同模型的能力时，使用不同的性能度量往往会导致不同的评判结果。本节除2.5.1外，其它主要介绍分类模型的性能度量。</p><h3 id="2-5-1-最常见的性能度量"><a href="#2-5-1-最常见的性能度量" class="headerlink" title="2.5.1 最常见的性能度量"></a>2.5.1 最常见的性能度量</h3><p>在回归任务中，即预测连续值的问题，最常用的性能度量是“均方误差”（mean squared error）,很多的经典算法都是采用了MSE作为评价函数，想必大家都十分熟悉。</p><p><img src="https://cdn.kesci.com/upload/image/q61kxmin0z.png?imageView2/0/w/960/h/960"></p><p>在分类任务中，即预测离散值的问题，最常用的是错误率和精度，错误率是分类错误的样本数占样本总数的比例，精度则是分类正确的样本数占样本总数的比例，易知：错误率+精度&#x3D;1。</p><p><img src="https://cdn.kesci.com/upload/image/q61ky8r30d.png?imageView2/0/w/960/h/960"></p><h3 id="2-5-2-查准率-x2F-查全率-x2F-F1"><a href="#2-5-2-查准率-x2F-查全率-x2F-F1" class="headerlink" title="2.5.2 查准率&#x2F;查全率&#x2F;F1"></a>2.5.2 查准率&#x2F;查全率&#x2F;F1</h3><p>错误率和精度虽然常用，但不能满足所有的需求，例如：在推荐系统中，我们只关心推送给用户的内容用户是否感兴趣（即查准率），或者说所有用户感兴趣的内容我们推送出来了多少（即查全率）。因此，使用查准&#x2F;查全率更适合描述这类问题。对于二分类问题，分类结果混淆矩阵与查准&#x2F;查全率定义如下：</p><p><img src="https://cdn.kesci.com/upload/image/q61kzc7otc.png?imageView2/0/w/960/h/960"></p><p>初次接触时，FN与FP很难正确的理解，按照惯性思维容易把FN理解成：False-&gt;Negtive，即将错的预测为错的，这样FN和TN就反了，后来找到一张图，描述得很详细，为方便理解，把这张图也贴在了下边：</p><p><img src="https://cdn.kesci.com/upload/image/q61l034hak.png?imageView2/0/w/960/h/960"></p><p>正如天下没有免费的午餐，查准率和查全率是一对矛盾的度量。例如我们想让推送的内容尽可能用户全都感兴趣，那只能推送我们把握高的内容，这样就漏掉了一些用户感兴趣的内容，查全率就低了；如果想让用户感兴趣的内容都被推送，那只有将所有内容都推送上，宁可错杀一千，不可放过一个，这样查准率就很低了。</p><p>“P-R曲线”正是描述查准&#x2F;查全率变化的曲线，P-R曲线定义如下：根据学习器的预测结果（一般为一个实值或概率）对测试样本进行排序，将最可能是“正例”的样本排在前面，最不可能是“正例”的排在后面，按此顺序逐个把样本作为“正例”进行预测，每次计算出当前的P值和R值，如下图所示：</p><p><img src="https://cdn.kesci.com/upload/image/q61l0t71mv.png?imageView2/0/w/960/h/960"></p><p>P-R曲线如何评估呢？若一个学习器A的P-R曲线被另一个学习器B的P-R曲线完全包住，则称：B的性能优于A。若A和B的曲线发生了交叉，则谁的曲线下的面积大，谁的性能更优。但一般来说，曲线下的面积是很难进行估算的，所以衍生出了“平衡点”（Break-Event Point，简称BEP），即当P&#x3D;R时的取值，平衡点的取值越高，性能更优。</p><p>P和R指标有时会出现矛盾的情况，这样就需要综合考虑他们，最常见的方法就是F-Measure，又称F-Score。F-Measure是P和R的加权调和平均，即：</p><p><img src="https://cdn.kesci.com/upload/image/q61l1di7g7.png?imageView2/0/w/960/h/960"></p><p>特别地，当β&#x3D;1时，也就是常见的F1度量，是P和R的调和平均，当F1较高时，模型的性能越好。</p><p><img src="https://cdn.kesci.com/upload/image/q61l259cb4.png?imageView2/0/w/960/h/960"></p><p><img src="https://cdn.kesci.com/upload/image/q61l2khyoy.png?imageView2/0/w/960/h/960"></p><p>有时候我们会有多个二分类混淆矩阵，例如：多次训练或者在多个数据集上训练，那么估算全局性能的方法有两种，分为宏观和微观。简单理解，宏观就是先算出每个混淆矩阵的P值和R值，然后取得平均P值macro-P和平均R值macro-R，在算出Fβ或F1，而微观则是计算出混淆矩阵的平均TP、FP、TN、FN，接着进行计算P、R，进而求出Fβ或F1。</p><p><img src="https://cdn.kesci.com/upload/image/q61l35d0e5.png?imageView2/0/w/960/h/960"></p><h3 id="2-5-3-ROC与AUC"><a href="#2-5-3-ROC与AUC" class="headerlink" title="2.5.3 ROC与AUC"></a>2.5.3 ROC与AUC</h3><p>如上所述：学习器对测试样本的评估结果一般为一个实值或概率，设定一个阈值，大于阈值为正例，小于阈值为负例，因此这个实值的好坏直接决定了学习器的泛化性能，若将这些实值排序，则排序的好坏决定了学习器的性能高低。ROC曲线正是从这个角度出发来研究学习器的泛化性能，ROC曲线与P-R曲线十分类似，都是按照排序的顺序逐一按照正例预测，不同的是ROC曲线以“真正例率”（True Positive Rate，简称TPR）为横轴，纵轴为“假正例率”（False Positive Rate，简称FPR），ROC偏重研究基于测试样本评估值的排序好坏。</p><p><img src="https://cdn.kesci.com/upload/image/q61l4ldd4k.png?imageView2/0/w/960/h/960"></p><p>简单分析图像，可以得知：当FN&#x3D;0时，TN也必须0，反之也成立，我们可以画一个队列，试着使用不同的截断点（即阈值）去分割队列，来分析曲线的形状，（0,0）表示将所有的样本预测为负例，（1,1）则表示将所有的样本预测为正例，（0,1）表示正例全部出现在负例之前的理想情况，（1,0）则表示负例全部出现在正例之前的最差情况。限于篇幅，这里不再论述。</p><p>现实中的任务通常都是有限个测试样本，因此只能绘制出近似ROC曲线。绘制方法：首先根据测试样本的评估值对测试样本排序，接着按照以下规则进行绘制。</p><p><img src="https://cdn.kesci.com/upload/image/q61l57basb.png?imageView2/0/w/960/h/960"></p><p>同样地，进行模型的性能比较时，若一个学习器A的ROC曲线被另一个学习器B的ROC曲线完全包住，则称B的性能优于A。若A和B的曲线发生了交叉，则谁的曲线下的面积大，谁的性能更优。ROC曲线下的面积定义为AUC（Area Uder ROC Curve），不同于P-R的是，这里的AUC是可估算的，即AOC曲线下每一个小矩形的面积之和。易知：AUC越大，证明排序的质量越好，AUC为1时，证明所有正例排在了负例的前面，AUC为0时，所有的负例排在了正例的前面。</p><p><img src="https://cdn.kesci.com/upload/image/q61l60ltdz.png?imageView2/0/w/960/h/960"></p><h3 id="2-5-4-代价敏感错误率与代价曲线"><a href="#2-5-4-代价敏感错误率与代价曲线" class="headerlink" title="2.5.4 代价敏感错误率与代价曲线"></a>2.5.4 代价敏感错误率与代价曲线</h3><p>上面的方法中，将学习器的犯错同等对待，但在现实生活中，将正例预测成假例与将假例预测成正例的代价常常是不一样的，例如：将无疾病–&gt;有疾病只是增多了检查，但有疾病–&gt;无疾病却是增加了生命危险。以二分类为例，由此引入了“代价矩阵”（cost matrix）。</p><p><img src="https://cdn.kesci.com/upload/image/q61lgwniqb.png?imageView2/0/w/960/h/960"></p><p>在非均等错误代价下，我们希望的是最小化“总体代价”，这样“代价敏感”的错误率（2.5.1节介绍）为：</p><p><img src="https://cdn.kesci.com/upload/image/q61lhg5rx1.png?imageView2/0/w/960/h/960"><br>同样对于ROC曲线，在非均等错误代价下，演变成了“代价曲线”，代价曲线横轴是取值在[0,1]之间的正例概率代价，式中p表示正例的概率，纵轴是取值为[0,1]的归一化代价。</p><p><img src="https://cdn.kesci.com/upload/image/q61lhyqcjq.png?imageView2/0/w/960/h/960"></p><p><img src="https://cdn.kesci.com/upload/image/q61lia9gex.png?imageView2/0/w/960/h/960"><br>代价曲线的绘制很简单：设ROC曲线上一点的坐标为(TPR，FPR) ，则可相应计算出FNR，然后在代价平面上绘制一条从(0，FPR) 到(1，FNR) 的线段，线段下的面积即表示了该条件下的期望总体代价；如此将ROC 曲线土的每个点转化为代价平面上的一条线段，然后取所有线段的下界，围成的面积即为在所有条件下学习器的期望总体代价，如图所示：</p><p><img src="https://cdn.kesci.com/upload/image/q61lim3jzc.png?imageView2/0/w/960/h/960"><br>在此模型的性能度量方法就介绍完了，以前一直以为均方误差和精准度就可以了，现在才发现天空如此广阔~</p><h2 id="2-6-比较检验"><a href="#2-6-比较检验" class="headerlink" title="2.6 比较检验"></a>2.6 比较检验</h2><p>在比较学习器泛化性能的过程中，统计假设检验（hypothesis test）为学习器性能比较提供了重要依据，即若A在某测试集上的性能优于B，那A学习器比B好的把握有多大。 为方便论述，本篇中都是以“错误率”作为性能度量的标准。</p><h3 id="2-6-1-假设检验"><a href="#2-6-1-假设检验" class="headerlink" title="2.6.1 假设检验"></a>2.6.1 假设检验</h3><p>“假设”指的是对样本总体的分布或已知分布中某个参数值的一种猜想，例如：假设总体服从泊松分布，或假设正态总体的期望u&#x3D;u0。回到本篇中，我们可以通过测试获得测试错误率，但直观上测试错误率和泛化错误率相差不会太远，因此可以通过测试错误率来推测泛化错误率的分布，这就是一种假设检验。<br><img src="https://cdn.kesci.com/upload/image/q61ltam95c.jpg?imageView2/0/w/960/h/960"></p><p><img src="https://cdn.kesci.com/upload/image/q61lxbfwv0.png?imageView2/0/w/960/h/960"></p><p><img src="https://cdn.kesci.com/upload/image/q61lxytbxs.png?imageView2/0/w/960/h/960"></p><h3 id="2-6-2-交叉验证t检验"><a href="#2-6-2-交叉验证t检验" class="headerlink" title="2.6.2 交叉验证t检验"></a>2.6.2 交叉验证t检验</h3><p><img src="https://cdn.kesci.com/upload/image/q61meprmid.png?imageView2/0/w/960/h/960"></p><h3 id="2-6-3-McNemar检验"><a href="#2-6-3-McNemar检验" class="headerlink" title="2.6.3 McNemar检验"></a>2.6.3 McNemar检验</h3><p>MaNemar主要用于二分类问题，与成对t检验一样也是用于比较两个学习器的性能大小。主要思想是：若两学习器的性能相同，则A预测正确B预测错误数应等于B预测错误A预测正确数，即e01&#x3D;e10，且|e01-e10|服从N（1，e01+e10）分布。</p><p><img src="https://cdn.kesci.com/upload/image/q61mwdgw10.png?imageView2/0/w/960/h/960"><br>因此，如下所示的变量服从自由度为1的卡方分布，即服从标准正态分布N（0,1）的随机变量的平方和，下式只有一个变量，故自由度为1，检验的方法同上：做出假设–&gt;求出满足显著度的临界点–&gt;给出拒绝域–&gt;验证假设。<br><img src="https://cdn.kesci.com/upload/image/q61mwuqayc.png?imageView2/0/w/960/h/960"></p><h3 id="2-6-4-Friedman检验与Nemenyi后续检验"><a href="#2-6-4-Friedman检验与Nemenyi后续检验" class="headerlink" title="2.6.4 Friedman检验与Nemenyi后续检验"></a>2.6.4 Friedman检验与Nemenyi后续检验</h3><p>上述的三种检验都只能在一组数据集上，F检验则可以在多组数据集进行多个学习器性能的比较，基本思想是在同一组数据集上，根据测试结果（例：测试错误率）对学习器的性能进行排序，赋予序值1,2,3…，相同则平分序值，如下图所示：</p><p><img src="https://cdn.kesci.com/upload/image/q61mzhsqg5.png?imageView2/0/w/960/h/960"><br>若学习器的性能相同，则它们的平均序值应该相同，且第i个算法的平均序值ri服从正态分布N（（k+1）&#x2F;2，（k+1）(k-1)&#x2F;12），则有：<br><img src="https://cdn.kesci.com/upload/image/q61n1wqlqs.png?imageView2/0/w/960/h/960"></p><p><img src="https://cdn.kesci.com/upload/image/q61n2sqgv5.png?imageView2/0/w/960/h/960"><br>服从自由度为k-1和(k-1)(N-1)的F分布。下面是F检验常用的临界值：</p><p><img src="https://cdn.kesci.com/upload/image/q61n36xwpo.png?imageView2/0/w/960/h/960"><br>若“H0：所有算法的性能相同”这个假设被拒绝，则需要进行后续检验，来得到具体的算法之间的差异。常用的就是Nemenyi后续检验。Nemenyi检验计算出平均序值差别的临界值域，下表是常用的qa值，若两个算法的平均序值差超出了临界值域CD，则相应的置信度1-α拒绝“两个算法性能相同”的假设。</p><p><img src="https://cdn.kesci.com/upload/image/q61n4sr5tm.png?imageView2/0/w/960/h/960"></p><p><img src="https://cdn.kesci.com/upload/image/q61n5i1x1v.png?imageView2/0/w/960/h/960"></p><h2 id="2-7-偏差与方差"><a href="#2-7-偏差与方差" class="headerlink" title="2.7 偏差与方差"></a>2.7 偏差与方差</h2><p>偏差-方差分解是解释学习器泛化性能的重要工具。在学习算法中，偏差指的是预测的期望值与真实值的偏差，方差则是每一次预测值与预测值得期望之间的差均方。实际上，偏差体现了学习器预测的准确度，而方差体现了学习器预测的稳定性。通过对泛化误差的进行分解，可以得到：</p><ul><li><strong>期望泛化误差&#x3D;方差+偏差</strong></li><li><strong>偏差刻画学习器的拟合能力</strong></li><li><strong>方差体现学习器的稳定性</strong></li></ul><p>易知：方差和偏差具有矛盾性，这就是常说的偏差-方差窘境（bias-variance dilamma），随着训练程度的提升，期望预测值与真实值之间的差异越来越小，即偏差越来越小，但是另一方面，随着训练程度加大，学习算法对数据集的波动越来越敏感，方差值越来越大。换句话说：在欠拟合时，偏差主导泛化误差，而训练到一定程度后，偏差越来越小，方差主导了泛化误差。因此训练也不要贪杯，适度辄止。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础算法笔记-数据结构</title>
    <link href="/2023/01/16/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2023/01/16/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构基础一"><a href="#数据结构基础一" class="headerlink" title="数据结构基础一"></a>数据结构基础一</h1><h2 id="1-单链表（数组模拟）"><a href="#1-单链表（数组模拟）" class="headerlink" title="1.单链表（数组模拟）"></a>1.单链表（数组模拟）</h2><p>常用的是邻接表（其实就是单链表，邻接表就是用多个单链表存储了多条线？！），一般用来存储图和树，使用结构体和指针来表示数组的时候，是使用的动态开辟空间，速度太慢，所以一般使用数组来静态模拟单链表。</p><p>数组模拟单链表的思路：首先开辟两个足够大的数组，一个是存储链表中的数，一个表示链表中结点的下一个结点的指针，还需要有两个数，一个数来存储头指针，一个是存储当前已经用到了哪个数组位置。</p><p>注意到单链表有个特质，就是只能向后看，你只能找到一个结点的下一个结点，但是不能找到上一个结点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-comment">//head 表示头结点的指针是多少</span><br><span class="hljs-comment">//e[i] 表示节点i的值是多少</span><br><span class="hljs-comment">//ne[i] 表示节点i的next指针是多少</span><br><span class="hljs-comment">//idx 储存当前已经用到了哪个点</span><br><span class="hljs-type">int</span> head,e[N],ne[N],idx;<br><br><span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head = <span class="hljs-number">-1</span>;<span class="hljs-comment">//数组模拟使用-1来表示空</span><br>    idx = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//将x插入到头结点的位置`在这里插入代码片`</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_to_head</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = x;<span class="hljs-comment">//存下值</span><br>    ne[idx] = head;<span class="hljs-comment">//存下next指针</span><br>    head = idx;<span class="hljs-comment">//更新头结点</span><br>    idx ++;<br>&#125;<br><br><span class="hljs-comment">//将x插入到下标为k的结点后面</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>e[idx] = x;<br>    ne[idx] = ne[k];<br>    ne[k] = idx;<br>    idx ++;<br>&#125;<br><br><span class="hljs-comment">//删除下标是k的后面的点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    ne[k] = ne[ne[k]];<span class="hljs-comment">//指向下一个的下一个</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-双链表（数组模拟）"><a href="#2-双链表（数组模拟）" class="headerlink" title="2.双链表（数组模拟）"></a>2.双链表（数组模拟）</h2><p>双链表也就是同时储存上一个点的指针和下一个点的指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> e[N],l[N],r[N],idx; <span class="hljs-comment">//这里就不用定义头结点和尾结点了，我们可以使用第0个点和第1个点偷懒，e[N]代表结点中存储的值，r[N]代表每一个结点的下一个点的指针（也就是数组存储中的下标），l[N]代表每一个结点上一个点的指针，idx记录现在已经使用到了哪个数组下标</span><br><br><span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//0表示左端点，1表示右端点</span><br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    idx = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">//第k点的右边插入   在k的左边插入一个新的点直接调用add(l[k],x)，也就是在k的左边插入等于在k的左边第一个点的右边插入一个点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span></span>&#123;<br>    e[idx] = x;<br>    r[idx] = r[k];<br>    l[idx] = k;<br>    l[r[k]] = idx;<br>    r[k] = idx;<br>    idx ++;<br>&#125;<br><br><span class="hljs-comment">//删除结点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<br>    r[l[k]] = r[k]; <span class="hljs-comment">//k点左边的第一个点的右指针指向k点的右结点，直接跳过k点</span><br>    l[r[k]] = l[k]; <span class="hljs-comment">//k点右边的第一个点的左指针指向k点的左结点，直接跳过k点</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-栈和队列（数组模拟）"><a href="#3-栈和队列（数组模拟）" class="headerlink" title="3.栈和队列（数组模拟）"></a>3.栈和队列（数组模拟）</h2><p>栈：先进后出 （想象成单口的水井，每次进行一次操作，不是拿出就是放入，先被放入的会更晚拿出来）</p><p>队列：先进先出（想象成双口的罐子，每次进行一次操作，从上面的口放入，从下面的口拿出，所以先放入队列的元素会先拿出来）</p><h5 id="栈的数组模拟"><a href="#栈的数组模拟" class="headerlink" title="栈的数组模拟"></a>栈的数组模拟</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> stk[N],tt;<span class="hljs-comment">//stk数组所代表的就是栈，tt代表的是栈顶元素的下标</span><br><br><span class="hljs-comment">//插入</span><br>stk[++ tt] = x;<span class="hljs-comment">//就是将新的元素放在了数组的最右端，并且将其下标记录</span><br><br><span class="hljs-comment">//删除栈顶元素</span><br>tt --;<span class="hljs-comment">//栈顶元素的下标记录减一，就相当于删除了栈顶元素</span><br><br><span class="hljs-comment">//判断是否为空</span><br><span class="hljs-keyword">if</span>(tt &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">not</span> empty;<br><span class="hljs-keyword">else</span> empty;<br><br><span class="hljs-comment">//取出栈顶元素</span><br>stk[tt];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="队列的数组模拟"><a href="#队列的数组模拟" class="headerlink" title="队列的数组模拟"></a>队列的数组模拟</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> q[N],hh,tt;<span class="hljs-comment">//hh表示队头元素，tt表示队尾元素</span><br><br><span class="hljs-comment">//插入</span><br>h[++tt] = x;<br><br><span class="hljs-comment">//弹出</span><br>hh++;<br><br><span class="hljs-comment">//判断是否为空</span><br><span class="hljs-keyword">if</span>(hh &lt;= tt) <span class="hljs-keyword">not</span> empty;<br><span class="hljs-keyword">else</span> empty;<br><br><span class="hljs-comment">//取出队头元素</span><br>q[hh];<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="单调栈和单调队列"><a href="#单调栈和单调队列" class="headerlink" title="单调栈和单调队列"></a>单调栈和单调队列</h5><p>单调栈一般应用：给定一个序列，找到这个序列中每一个数左边（右边）离他最近并且比它小或者大的数的位置，存在就返回这个数，不存在就返回这个-1。</p><blockquote><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p>给定一个长度为 <em><strong>N</strong></em> 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 <em><strong>−1</strong></em> 。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 <em><strong>N</strong></em> ，表示数列长度。</p><p>第二行包含 <em><strong>N</strong></em>  个整数，表示整数数列。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含 <em><strong>N</strong></em>  个整数，其中第 <em><strong>ii</strong></em> 个数表示第 <em><strong>ii</strong></em> 个数的左边第一个比它小的数，如果不存在则输出 <em><strong>−1</strong></em> 。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1≤N≤10^5$<br>$1≤数列中元素≤10^9$</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-1</span> 3 <span class="hljs-string">-1</span> 2 2<br></code></pre></td></tr></table></figure></blockquote><p>暴力做法类似于双指针算法，就是遍历一个数左边所有的数，来查找到离这个数最近且比这个数小的数。</p><p>使用单调栈优化，就是使用栈来存放所有的数据，在输入数据的时候就看一下栈顶元素是不是比当前的数大，如果栈顶元素大于你当前读入的元素，说明后面读入的所有数都不可能以栈顶元素为答案，因为你新读入的数大于栈顶元素并且距离左边更近，所以当读入的数据小于栈顶元素的时候就弹出栈顶元素。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n,stk[N],tt;<span class="hljs-comment">//stk数组模拟栈，tt记录栈顶元素</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">//输入优化，使得cin的输入更快</span><br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">while</span>(tt &amp;&amp; stk[tt] &gt;= x)tt--; <span class="hljs-comment">//判断栈顶元素是否大于等于当前插入元素</span><br>        <span class="hljs-keyword">if</span>(tt) cout &lt;&lt; stk[tt] &lt;&lt;<span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">//如果栈不为空，并且上一个判断完成，说明此时的栈顶元素就满足条件</span><br>        <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;-1 &quot;</span>;            <span class="hljs-comment">//如果栈为空，并且上一个判断完成，说明这些数据中这个数的左边没有满足条件的数</span><br>        stk[++tt] = x;                 <span class="hljs-comment">//向栈中插入新的元素</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度分许：每个元素最多进栈出栈一次，所以是O(n)的时间复杂度。</p><p>单调队列一般应用：求一个滑动窗口里的最大值或者最小值</p><blockquote><h3 id="滑动窗口-单调队列"><a href="#滑动窗口-单调队列" class="headerlink" title="滑动窗口(单调队列)"></a>滑动窗口(单调队列)</h3><p>给定一个大小为$n≤10^5$的数组</p><p>有一个大小为 <em><strong>k</strong></em> 的滑动窗口，它从数组的最左边移动到最右边。</p><p>你只能在窗口中看到 <em><strong>k</strong></em> 个数字。</p><p>每次滑动窗口向右移动一个位置。</p><p>以下是一个例子：</p><p>该数组为 <code>[1 3 -1 -3 5 3 6 7]</code>， <em><strong>k</strong></em> 为 33。</p><table><thead><tr><th align="left">窗口位置</th><th align="left">最小值</th><th align="left">最大值</th></tr></thead><tbody><tr><td align="left">[1 3 -1] -3 5 3 6 7</td><td align="left">-1</td><td align="left">3</td></tr><tr><td align="left">1 [3 -1 -3] 5 3 6 7</td><td align="left">-3</td><td align="left">3</td></tr><tr><td align="left">1 3 [-1 -3 5] 3 6 7</td><td align="left">-3</td><td align="left">5</td></tr><tr><td align="left">1 3 -1 [-3 5 3] 6 7</td><td align="left">-3</td><td align="left">5</td></tr><tr><td align="left">1 3 -1 -3 [5 3 6] 7</td><td align="left">3</td><td align="left">6</td></tr><tr><td align="left">1 3 -1 -3 5 [3 6 7]</td><td align="left">3</td><td align="left">7</td></tr></tbody></table><p>你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含两行。</p><p>第一行包含两个整数 <em><strong>n</strong></em> 和 <em><strong>k</strong></em>，分别代表数组长度和滑动窗口的长度。</p><p>第二行有 <em><strong>n</strong></em> 个整数，代表数组的具体数值。</p><p>同行数据之间用空格隔开。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包含两个。</p><p>第一行输出，从左至右，每个位置滑动窗口中的最小值。</p><p>第二行输出，从左至右，每个位置滑动窗口中的最大值。</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">8 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> -<span class="hljs-number">1</span> -<span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-1</span> <span class="hljs-string">-3</span> <span class="hljs-string">-3</span> <span class="hljs-string">-3</span> 3 3<br>3 3 5 5 6 7<br></code></pre></td></tr></table></figure></blockquote><p>暴力做法，双重遍历，时间复杂度O(n^2^)。</p><p>使用单调队列来优化，就拿寻找最小值举例，如果向右移动后的数据是最小的数，那么窗口中的前两个数在寻找最小值的过程中是不是就没有用了，因为最新进入窗口的数更小。寻找最大值优化也是类似的。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>; <span class="hljs-comment">//数据范围较大，注意使用scanf和printf输入输出，或者使用ios优化和tie优化</span><br><br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> a[N],q[N];<span class="hljs-comment">//a数组是用来存储数组，q数组是用来存储队列</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>,tt = <span class="hljs-number">-1</span>;<span class="hljs-comment">//hh表示队头，tt表示队尾</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;<br>        <span class="hljs-comment">//判断队头是否滑出窗口，每一次最多向后移动一位，所以就算是滑出也只有一位的差距，所以只用写出一个判断不需要使用循环，判断滑出窗口后就将对头向后移动一位就能重新进入窗口了。</span><br>        <span class="hljs-keyword">if</span>(hh &lt;= tt &amp;&amp; i - k + <span class="hljs-number">1</span> &gt; q[hh]) hh ++;<br>        <span class="hljs-comment">//判断新进队列的数和当前队列中的队尾哪个数字大，如果当前队列队尾数字更大，就直接去掉这个数字，因为寻找最小值，那么当前读入的数字一定比当前队列队尾数字更大的话，那么它就一定是作为窗口中的最小值</span><br>        <span class="hljs-keyword">while</span>(hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt --;<br>        q[++ tt] = i;<span class="hljs-comment">//插入数据</span><br>        <span class="hljs-keyword">if</span>(i &gt;= k - <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[q[hh]]);<span class="hljs-comment">//输出，队列是一个一个进的，所以前k - 1个数字依次进入窗口中的时候，窗口中的数字还不是k个，这个时候还没有输出，所以需要判断一下</span><br>    &#125;<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-comment">//最大值做法基本一致，只需要更改输入时的判断条件即可</span><br>    hh = <span class="hljs-number">0</span>,tt = <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;<br>        <span class="hljs-keyword">if</span>(hh &lt;= tt &amp;&amp; i - k + <span class="hljs-number">1</span> &gt; q[hh]) hh ++;<br>        <span class="hljs-keyword">while</span>(hh &lt;= tt &amp;&amp; a[q[tt]] &lt; a[i]) tt --;<br>        q[++ tt] = i;<br>        <span class="hljs-keyword">if</span>(i &gt;= k - <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[q[hh]]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从代码的实现过程中不难看出，单调栈和单调队列都是利用在插入的时候进行判断弹出了栈顶元素或者是队尾元素，通过这样的方式来维护栈和队列，使得其始终是单调递增或者单调递减的，这样就能满足某些寻找最大值或者最小值的条件。</p><h2 id="4-KMP"><a href="#4-KMP" class="headerlink" title="4.KMP"></a>4.KMP</h2><p>KMP算法就是匹配字符串的优化算法，给定模板字符串和目标字符串，需要寻找目标字符串是不是模板字符串的子串，如果是的话就返回字串的初始下标</p><p>暴力做法：暴力做法就是遍历每一个模板字符串中的每一个字符，将模板字符串中的每一个字符当作目标字符串的初始字符，来匹配后面的字符串是不是和目标字符串相匹配。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++)&#123;<br>        <span class="hljs-keyword">if</span>(s[j] != p[j])&#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>KMP算法思路：每次匹配完一个字符后，如果相同就匹配两个字符串的下一个字符，如果不相同，按照暴力思路的话，就需要从下一个模板字符串的字符开始重新依次循环匹配，而KMP算法就是通过优化，减少不必要的移动后再次匹配。例如一个模板字符串abababababcabab（p[]），一个目标字符串ababcabab（s[]）,按照暴力思路的话，第一次匹配的时候第五个字符不同，就会向后移动一位，但是很显然，移动一位后模板字符串的首字符变成了b，很明显这就是无效的移动。那我们再想一想，目标字符串ababcabab以s[3]为终点的子串，以及以s[0]为起点的子串，最大长度是2（就是ab），注意观察，我们能发现，暴力模拟每次匹配失败的字符前的都是匹配成功的，那么以s[0]为起点的子串，它与以s[3]为终点的子串相等，那么也就和模板字符串匹配失败的字符的前一个字符相同长度的子串是相同的，所以可以直接将目标字符串向后移动多位，这个位数就是匹配失败的字符的前一个字符的下标和这个字符的最大子串长度的差。</p><h6 id="KMP演示代码"><a href="#KMP演示代码" class="headerlink" title="KMP演示代码"></a>KMP演示代码</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>,M = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> p[N],s[M];<span class="hljs-comment">//s数组就是模板字符串，p数组就是目标字符串</span><br><span class="hljs-type">int</span> ne[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; p + <span class="hljs-number">1</span> &gt;&gt; m &gt;&gt; s + <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">//求next数组，其实与KMP核心思想类似，差别就是拿着两个相等的字符串再进行比较，去寻找模板字符串中的每个i所能对应的最大的j。然后将这个j更新到next数组中</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i ++)&#123; <span class="hljs-comment">//首先，i从2开始</span><br>        <span class="hljs-keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j]; <span class="hljs-comment">//如果j不为0，并且字符不匹配，那么就相当于将目标字符串向前移动</span><br>        <span class="hljs-keyword">if</span>(p[i] == p[j + <span class="hljs-number">1</span>]) j ++;<span class="hljs-comment">//如果匹配成功，那么就能将j向后移动</span><br>        ne[i] = j; <span class="hljs-comment">//更新next</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//KMP核心</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i ++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>        <span class="hljs-keyword">if</span>(s[i] == p[j + <span class="hljs-number">1</span>]) j ++;<br>        <span class="hljs-keyword">if</span>(j == n)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i - n);<br>            j = ne[j];<br>        &#125;<br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-Trie"><a href="#5-Trie" class="headerlink" title="5. Trie"></a>5. Trie</h2><p>作用：高效的储存和查找字符串集合的数据结构</p><p>原理：其实就是使用一种类似于链表的方法，储存字符串集合的时候，从根结点出发，判断根节点是否有链接到该字符串的第一个字符，没有的话就创建一个结点，让它和根结点链接，如果存在的话，就直接移动到该结点，然后查找该结点是否有和第二个字符有链接，依次类推，当每一个字符串的最后一个字符存储进去后，在这个结点使用一个标记，代表有一个以这个结点结束的字符，避免子串被母串所覆盖，或者有相同的字符串相覆盖的情况存在，查找字符串的时候类似，从根结点开始查找第一个字符，查找到了后就移动到第二个字符的结点然后查找这个结点是否和第三个结点相连接，一次类推。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;、<br>  <br><span class="hljs-type">int</span> son[N][<span class="hljs-number">26</span>],cnt[N],idx;<span class="hljs-comment">//son[N][26]表示所有的结点，每一个结点有26个字母（不同的题目不一样），当需要创建结点的时候就直接从其中使用就是了，cnt[N]记录所有结点以当前结点为终点的字符串的数量是多少，idx记录当前使用到的下标</span><br><span class="hljs-type">char</span> str[N];<br><br><span class="hljs-comment">//向Trie树中存储字符串</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<span class="hljs-comment">//p表示当前从存储到了哪个结点，最开始是从根节点开始，所以p=0</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++)&#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!son[p][u]) son[p][u] = ++ idx;<span class="hljs-comment">//如果该结点的这个地方没有链接字符，就使用新的结点，让其链接起来，并且将idx++</span><br>        p = son[p][u];<span class="hljs-comment">//移动到下一个结点,注意，如果这是最后一重循环的话，下一个结点才是你当前存储的字符串的最后一个结点。</span><br>    &#125;<br>    cnt[p] ++;<span class="hljs-comment">//当前字符串存储完毕，该字符串存储的最后一个结点代表的字符串数量加一</span><br>&#125;<br><br><span class="hljs-comment">//在Trie数中查找字符串</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++)&#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//如果当前结点没有链接到应该连接的下一个字符，就说明该数中储存的字符串集合没有所查找的字符串</span><br>        p = son[p][u];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> cnt[p];<span class="hljs-comment">//如果按照链接的查找能够遍历完目标字符串的所有字符，那么就返回尾结点的字符串数量，如果为0的话说明该字符串集合中存在的其实是目标字符串的一个母串</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">while</span>(n --)&#123;<br>        cin &gt;&gt; op &gt;&gt; str;<br>        <span class="hljs-keyword">if</span> (*op == <span class="hljs-string">&#x27;I&#x27;</span>) <span class="hljs-built_in">insert</span>(str);<span class="hljs-comment">//插入</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(str));<span class="hljs-comment">//搜索</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-并查集"><a href="#6-并查集" class="headerlink" title="6.并查集"></a>6.并查集</h2><p>作用：将两个集合合并，询问两个元素是否在一个集合当中</p><p>原理：每个集合用一棵树来表示，树根的编号就是整个集合的编号，每个结点存储它的父节点，p[x]表示x的父节点，根结点的父节点就让他等于自己的编号，所以查找x的集合编号的时候就依次向上遍历父节点是否等于自身的编号就是了，需要将两个集合合并的时候，只需要将其中任意一个的根节点的父节点指向另一个集合的父节点就行了。</p><p>路径压缩优化：朴素版本的并查集的时间复杂度依旧较高，主要原因是查找的必须向上遍历多次，并且每次都需要遍历，所以路径优化的原理就是，对于查找过根结点的结点，直接将它们的父节点指向根结点，这样在需要重复查找的时候就能更加快速，使用路径压缩优化后的时间复杂度接近O（1）</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> p[N];<span class="hljs-comment">//每个点的父结点</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-comment">//实现祖宗结点的的查找和路径压缩优化</span><br>     <span class="hljs-keyword">if</span>(p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]); <span class="hljs-comment">//如果这个点不是父节点那么就让它的父节点等于它的祖宗结点</span><br>     <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) p[i] = i;<span class="hljs-comment">//初始化所有点的父节点</span><br>    <span class="hljs-keyword">while</span>(m --)&#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<span class="hljs-comment">//如果使用字符变量而不是使用字符串的话，使用scanf读入的时候会读入些莫名其妙的空格或者回车</span><br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d%d&quot;</span>,&amp;op,&amp;a,&amp;b);        <br>        <span class="hljs-keyword">if</span>(op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;M&#x27;</span>) p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其余变形的并查集无非就是多维护一些别的数据，接下来将给出两个例题。</p><blockquote><h3 id="连通块中点的数量"><a href="#连通块中点的数量" class="headerlink" title="连通块中点的数量"></a>连通块中点的数量</h3><p>给定一个包含 <em><strong>n</strong></em> 个点（编号为 <em><strong>1∼n</strong></em>）的无向图，初始时图中没有边。</p><p>现在要进行 <em><strong>m</strong></em> 个操作，操作共有三种：</p><ol><li><code>C a b</code>，在点 <em><strong>a</strong></em> 和点 <em><strong>b</strong></em> 之间连一条边，<em><strong>a</strong></em> 和 <em><strong>b</strong></em> 可能相等；</li><li><code>Q1 a b</code>，询问点 <em><strong>a</strong></em> 和点 <em><strong>b</strong></em> 是否在同一个连通块中，<em><strong>a</strong></em> 和 <em><strong>b</strong></em> 可能相等；</li><li><code>Q2 a</code>，询问点 <em><strong>a</strong></em> 所在连通块中点的数量；</li></ol><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入整数 <em><strong>n</strong></em> 和 <em><strong>m</strong></em>。</p><p>接下来 <em><strong>m</strong></em> 行，每行包含一个操作指令，指令为 <code>C a b</code>，<code>Q1 a b</code> 或 <code>Q2 a</code> 中的一种。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个询问指令 <code>Q1 a b</code>，如果 <em><strong>a</strong></em> 和 <em><strong>b</strong></em> 在同一个连通块中，则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><p>对于每个询问指令 <code>Q2 a</code>，输出一个整数表示点 <em><strong>a</strong></em> 所在连通块中点的数量</p><p>每个结果占一行。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1≤n,m≤10^5$</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">5</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">C</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">Q1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">Q2</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">C</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">Q2</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Yes</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></blockquote><p>思路：此题是给定了n个点的无向图，这些点之间连接线后，可以形成连通块，同一个连通块可以只用一个集合来维护，所以就很容易的想到使用并查集，但是，操作当中需要寻找到连通块中点的数量，所以就需要有一个数组来维护连通块中点的数量是多少，注意，只需要维护每个根节点的这个变量就行了，只需要每个根节点的这个数字是正确的就能完成对应的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> p[N],cnt[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>     <span class="hljs-keyword">if</span>(p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>     <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) p[i] = i, cnt[i] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(m --)&#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> a,b;<br>        cin &gt;&gt; op;<br>        <br>        <span class="hljs-keyword">if</span>(op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;C&#x27;</span>)&#123;<br>            cin &gt;&gt; a &gt;&gt; b;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b)) <span class="hljs-keyword">continue</span>;<br>            p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br>            cnt[b] += cnt[a]; <span class="hljs-comment">//连通块中点的数量的维护</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>            cin &gt;&gt; a &gt;&gt; b;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cin &gt;&gt; a;<br>            cout &lt;&lt; cnt[p[a]] &lt;&lt; endl;<br>        &#125;<br>    &#125;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-堆"><a href="#7-堆" class="headerlink" title="7.堆"></a>7.堆</h2><p>手写堆最基本的操作：</p><blockquote><ol><li>插入一个数</li><li>求集合当中的最小值</li><li>删除最小值</li><li>删除任意一个元素</li><li>修改任意一个元素</li></ol></blockquote><p>前三个要求STL是可以实现的，最后两个是STL不能直接实现的。</p><p>堆是一棵完全二叉树，除了最后一层结点之外上层的所有结点都是满的，最后一层的结点是从左到右排列的，同时，（小根堆）堆满足所有的结点都小于左右子结点，所以很明显根节点就是最小值。</p><p>堆的存储是一种全新的存储方式，使用的是一维数组，<em><strong>x</strong></em> 结点的左儿子是 <em><strong>2x</strong></em>,右儿子是 <em><strong>2x+1</strong></em>，所以数组的下标从1开始比较方便。</p><p>主要函数是down()函数和up()函数，对传入的数据进行向上的维护或者向下的维护。</p><p>实现方式：heap[]数组模拟堆，size记录最后一个元素</p><blockquote><ol><li>插入一个数                               heap[++size] &#x3D; x; up(size);</li><li>求集合当中的最小值                heap[1];</li><li>删除最小值                               heap[1] &#x3D; heap[size];size–;down(1);</li><li>删除任意一个元素                    heap[k] &#x3D; heap[size];size–;down(k);up(k);</li><li>修改任意一个元素                    heap[k] &#x3D; x;down(k);up(k);</li></ol></blockquote><p>代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//堆的初始化，首先可以使用一个一个插入的方法，但是这个初始化的方法的时间复杂度是O(logn),另一种方法是将所有的数据先读入数组中，然后对n/2前的所有数进行一次down的操作，就能实现时间复杂度为O(n)的堆初始化</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span>; i; i --) <span class="hljs-built_in">down</span>(i);<br><span class="hljs-comment">//down()函数 注意：size的初始化一定要放在调用down函数之前</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> t = x;<br>    <span class="hljs-keyword">if</span>(x * <span class="hljs-number">2</span> &lt;= size &amp;&amp; h[x * <span class="hljs-number">2</span>] &gt; h[t]) t = x * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(x * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[x * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &gt; h[t]) t = x * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(t != x)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(h[t],h[x]);<br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//up函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(x / <span class="hljs-number">2</span> &amp;&amp; h[x/<span class="hljs-number">2</span>] &gt; h[x])&#123;<br>        <span class="hljs-built_in">swip</span>(h[x/<span class="hljs-number">2</span>],h[x]);<br>        x /= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单链表</tag>
      
      <tag>双链表</tag>
      
      <tag>站和队列</tag>
      
      <tag>KMP</tag>
      
      <tag>Trie</tag>
      
      <tag>堆</tag>
      
      <tag>并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客格式记录</title>
    <link href="/2023/01/16/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/01/16/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="1-博客标签记录"><a href="#1-博客标签记录" class="headerlink" title="1.博客标签记录"></a>1.博客标签记录</h3><blockquote><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: 博客标题<br>date: 时间<br>categories: 分类，类别需要注意先后顺序 eg：[Diary,int]<br><span class="hljs-keyword">tags:</span> 标签 eg：[随笔,测试]<br>author: 作者名称 eg：chen<br>hide: 隐藏博客 <br>excerpt：摘要<br></code></pre></td></tr></table></figure></blockquote><h3 id="2-首页"><a href="#2-首页" class="headerlink" title="2.首页"></a>2.首页</h3><h4 id="2-1-打字机特效"><a href="#2-1-打字机特效" class="headerlink" title="2.1 打字机特效"></a>2.1 打字机特效</h4><p>首页大图中的标题文字，可在<strong>主题配置</strong>中设定是否开启：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">这是一条</span> <span class="hljs-string">Slogan</span><br>    <span class="hljs-attr">api:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br>      <span class="hljs-attr">keys:</span> [<span class="hljs-string">&quot;hitokoto&quot;</span>]<br></code></pre></td></tr></table></figure><p>如果 <code>text</code> 为空则按<strong>站点配置</strong>的 <code>subtitle</code> 显示。</p><p>另外支持通过 API 接口获取内容，如果请求失败则按 text 字段显示：</p><p><code>url</code>: API 地址，必须返回的是一个 JSON 格式</p><p><code>method</code>: 请求方法，可选 <code>GET</code>、<code>POST</code>、<code>PUT</code></p><p><code>headers</code>: 请求头，如果接口需要传一些验证的头部信息，在这里设置</p><p><code>keys</code>: 从请求结果获取字符串的取值字段，程序会根据列表中的字段依次取值，最终需要获得到一个字符串</p><p>例如 API 返回的内容为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Fluid&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;An elegant theme&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Test&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Test content&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>设置 <code>keys: [&quot;data&quot;, &quot;content&quot;]</code>，程序会如下执行：</p><ol><li>由于返回体是列表，程序会首先获取第一个元素（不是列表则跳过此步骤）</li><li>通过第一个 key <code>data</code> 获取值，发现不是一个字符串，继续执行</li><li>通过第二个 key <code>content</code> 获取值，发现是一个字符串，返回内容；如果不是字符串则获取失败，使用 text 值</li></ol><p>WARNING</p><p>如果 API 没有请求成功，请打开浏览器的控制台（console）检查是否报错，其中如果有包含 <code>No Access-Control-Allow-Origin header</code> 的报错，说明该 API 有跨域限制，这必须从 API 后端服务来解决。</p><p>标题文字默认开启了打字机动效，相关配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">fun_features:</span><br>  <span class="hljs-attr">typing:</span> <span class="hljs-comment"># 为 subtitle 添加打字机效果</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span> <span class="hljs-comment"># 打印速度</span><br>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-comment"># 游标字符</span><br>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否循环播放效果</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>TIP</p><p>请求 API 的功能必须同时开启打字机动效才能生效</p><h4 id="2-2-博客摘要"><a href="#2-2-博客摘要" class="headerlink" title="2.2 博客摘要"></a>2.2 博客摘要</h4><h4 id="2-3-博客跳转方式"><a href="#2-3-博客跳转方式" class="headerlink" title="2.3 博客跳转方式"></a>2.3 博客跳转方式</h4><h4 id="2-4-博客信息"><a href="#2-4-博客信息" class="headerlink" title="2.4 博客信息"></a>2.4 博客信息</h4><h4 id="2-5-隐藏博客"><a href="#2-5-隐藏博客" class="headerlink" title="2.5 隐藏博客"></a>2.5 隐藏博客</h4><h4 id="2-6-博客排序"><a href="#2-6-博客排序" class="headerlink" title="2.6 博客排序"></a>2.6 博客排序</h4>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
      <category>int</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
